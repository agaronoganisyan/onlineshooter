//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMaps/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""44ed76c8-d3a4-41ab-9d19-679c0eac2fd4"",
            ""actions"": [
                {
                    ""name"": ""MovementDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0a8532d1-55a0-4123-86b0-0d588c9977c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""87c41d6e-c941-4383-8d05-9a167d97e2a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switching"",
                    ""type"": ""Button"",
                    ""id"": ""df38be81-28bb-4c77-b7b5-430e6f25ee59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""c74b44af-4518-4479-8f00-b9dcd526a240"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reloading"",
                    ""type"": ""Button"",
                    ""id"": ""5b08fed9-772f-406b-b3f5-c4fb6e5110f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c2b0a94-554a-4103-8111-6ab2b03fc7ce"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""26b1c054-3d2f-4308-bfa2-744ecd0165bd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDelta"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""637866cc-8c9e-4479-b97c-97e98093b573"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c2a9f57-af6f-42d7-9a1a-863904f3c7ce"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1e245fc1-eef8-4390-b369-58ddd0160479"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2d9b007-bff4-4980-9c92-23af49da4b9d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""206aa500-fcb2-48fc-bb30-2f6ed5b672d6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30be4d99-ce47-4770-9aa6-c15ceaeb402c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52d30865-bf1e-4638-837c-d9638a622bb8"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switching"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e252a8c4-41a5-4a4d-b732-38394d0c1e61"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switching"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79f1cf01-6ba3-4191-9a08-2b3fee634e26"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aaec9e6c-797a-4377-a1e7-399987716183"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reloading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6603ab82-0a8b-4f3b-a3c3-6e8e67dbb985"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reloading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MovementDelta = m_Gameplay.FindAction("MovementDelta", throwIfNotFound: true);
        m_Gameplay_RotationDelta = m_Gameplay.FindAction("RotationDelta", throwIfNotFound: true);
        m_Gameplay_Switching = m_Gameplay.FindAction("Switching", throwIfNotFound: true);
        m_Gameplay_Throw = m_Gameplay.FindAction("Throw", throwIfNotFound: true);
        m_Gameplay_Reloading = m_Gameplay.FindAction("Reloading", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_MovementDelta;
    private readonly InputAction m_Gameplay_RotationDelta;
    private readonly InputAction m_Gameplay_Switching;
    private readonly InputAction m_Gameplay_Throw;
    private readonly InputAction m_Gameplay_Reloading;
    public struct GameplayActions
    {
        private @InputMap m_Wrapper;
        public GameplayActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementDelta => m_Wrapper.m_Gameplay_MovementDelta;
        public InputAction @RotationDelta => m_Wrapper.m_Gameplay_RotationDelta;
        public InputAction @Switching => m_Wrapper.m_Gameplay_Switching;
        public InputAction @Throw => m_Wrapper.m_Gameplay_Throw;
        public InputAction @Reloading => m_Wrapper.m_Gameplay_Reloading;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @MovementDelta.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovementDelta;
                @MovementDelta.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovementDelta;
                @MovementDelta.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovementDelta;
                @RotationDelta.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotationDelta;
                @RotationDelta.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotationDelta;
                @RotationDelta.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotationDelta;
                @Switching.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwitching;
                @Switching.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwitching;
                @Switching.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwitching;
                @Throw.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnThrow;
                @Reloading.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnReloading;
                @Reloading.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnReloading;
                @Reloading.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnReloading;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementDelta.started += instance.OnMovementDelta;
                @MovementDelta.performed += instance.OnMovementDelta;
                @MovementDelta.canceled += instance.OnMovementDelta;
                @RotationDelta.started += instance.OnRotationDelta;
                @RotationDelta.performed += instance.OnRotationDelta;
                @RotationDelta.canceled += instance.OnRotationDelta;
                @Switching.started += instance.OnSwitching;
                @Switching.performed += instance.OnSwitching;
                @Switching.canceled += instance.OnSwitching;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Reloading.started += instance.OnReloading;
                @Reloading.performed += instance.OnReloading;
                @Reloading.canceled += instance.OnReloading;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMovementDelta(InputAction.CallbackContext context);
        void OnRotationDelta(InputAction.CallbackContext context);
        void OnSwitching(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnReloading(InputAction.CallbackContext context);
    }
}
